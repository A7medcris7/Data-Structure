#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define EPS 1e-9
#define MOD 1000000007
#define ceil(n, m) (((n) / (m)) + ((n) % (m) ? 1 : 0))
#define sz(s) s.size()
#define all(s)  s.begin(),s.end()
#define OO 2000000000
#define ld long double
#define pi  3.141592653589793
#define rall(s)  s.rbegin(), s.rend()
#define fixed(n) cout << fixed << setprecision(n)
#define mod_combine(a, b, m) (((a % m) * (b % m)) % m)
#define se second
#define fi first
#define eb emplace_back
#define pb push_back
#define pf push_front
#define cin(x) for(auto&i:x)cin>>i;
#define cout(x) for(auto&i:x)cout<<i<<' ';
#define nl '\n'
using namespace std;
struct node
{
   node*left,*right;
   int val;
};


class BS_tree
{
   node*root;
   int number_of_nodes;
   bool Search(int num,node*curr){
      bool y;
      if(!curr) return 0;
        if(curr->val==num)return 1;
        else if(curr->val>num)
        y=Search(num,curr->left);
        if(curr->val<num)
        y=Search(num,curr->right);
        return y;
  }


    void inorderTraversal(node*root)
     {
        if(root)
        {
            inorderTraversal(root->left);
            cout<<root->val<<' ';
            inorderTraversal(root->right);
        }
     }


    void preorderTraversal(node*root)
     {
        if(root)
        {
            cout<<root->val<<' ';
            preorderTraversal(root->left);
            preorderTraversal(root->right);
        }
     }

     
    void postorderTraversal(node*root)
     {
        if(root)
        {
            postorderTraversal(root->left);
            postorderTraversal(root->right);
            cout<<root->val<<' ';
        }
     }



     
     int tree_Height(node*root)
     {
      if(!root)return 0;
      int mx=0;
      mx=max(1+tree_Height(root->left),1+tree_Height(root->right));
      return mx;
     }



     int tree_leaves_count(node*root)
     {
         if(!root)return 0;
         if(!(root->right)&&!(root->left))return 1;
         int cnt;
         cnt=(tree_leaves_count(root->left)+tree_leaves_count(root->right));
         return cnt;
     }




     void del(node*Node,node*p)
     {
        node*curr=Node;
        node*prev=curr;
        curr=curr->right;
        while(curr->left){
          prev=curr;
          curr=curr->left;
          }
        
        Node->val=curr->val;

          if(prev->left==curr)prev->left=curr->right;
          else prev->right=curr->right;
          delete curr;
     }




    void lvlorder(node*root)
    {
       
       queue<node*>q;
       q.push(root);
       int len=sz(q);
       while(!q.empty()){
       for(int i=0;i<len;i++)
       {
          node*curr=q.front();
           cout<<curr->val<<' ';
           if(curr->left)
           q.push(curr->left);
           if(curr->right)
           q.push(curr->right);

           q.pop();
       }
       }

    }




  public:

  BS_tree():root(NULL),number_of_nodes(0){}

  bool is_Empty()
  {
    return (number_of_nodes==0);
  }

  bool search(int num)
  {
     return Search(num,root);
  }

  void insert(int num)
  {
    node*newnode=new node;
    
    newnode->val=num;
    
    newnode->left=newnode->right=NULL;
    
    if(!root){root=newnode; 
    number_of_nodes++;} 
    
    else
    {
        node*curr=root;
        while(curr)
        {
          if(curr->val==num){curr=NULL; break;}
           if(curr->val>num){if(curr->left)curr=curr->left; else break;}
           if(curr->val<num){if(curr->right)curr=curr->right;  else break;}
        }
        if(curr){
        if(curr->val>num)curr->left=newnode;
        if(curr->val<=num)curr->right=newnode; 
        number_of_nodes++;
        }
    }
  }

  void delete_from_tree(int num)
  {
    if(!is_Empty()){
     
     node*curr=root;
     node*prev=NULL;
     while(curr)
     {
        if(curr->val==num)break;
        else if(curr->val>num){prev=curr; curr=curr->left;}
        else{prev=curr; curr=curr->right;}
     }
     if(curr)
     {
        number_of_nodes--;
        
        if(!(curr->left)&&!(curr->right))
        {
            if(prev->left==curr)
            prev->left=NULL;
            
            else
            prev->right=NULL;

            delete curr;
        } 


        else if(!(curr->left))
        {
            node*temp=curr;
            curr=curr->right;
            if(prev->left==temp)
              prev->left=curr;
            
            else
              prev->right=curr;
            
              temp->right=NULL;
            delete temp;
        }


        else if(!(curr->right))
        {
          
            node*temp=curr;
            curr=curr->left;
            if(prev->left==temp)
              prev->left=curr;
            
            else
              prev->right=curr;

              temp->left=NULL;
            delete temp;
        }


        else
        {
            del(curr,prev);
        }
     }
     
     }
  }

  void lvl_order()
  {
    if(is_Empty())cout<<"Tree is empty\n";
    else lvlorder(root);
  }

  void inorder_Traversal()
  {
    if(is_Empty())cout<<"Tree is empty\n";
    else
    inorderTraversal(root);
  }

  void preorder_Traversal()
  {
    if(is_Empty())cout<<"Tree is empty\n";
    else
    preorderTraversal(root);
  }

  void postorder_Traversal()
  {
    if(is_Empty())cout<<"Tree is empty\n";
    else
    postorderTraversal(root);
  }

  int treeHeight()
  {
     return tree_Height(root);
  }

  int nodecount()
  {
    return number_of_nodes;
  }

  int treeleavescount()
  {
    return tree_leaves_count(root);
  }
};

void solve()
{
   BS_tree b;
   b.insert(5);
   b.insert(8);
   b.insert(6);
   b.insert(7);
   b.insert(9);
   b.insert(10);
   b.insert(3);
   b.insert(2);
   b.insert(4);
   b.insert(1);
   //b.delete_from_tree(5);
   //b.delete_from_tree(8);
   //b.lvl_order();
   //b.inorder_Traversal();
   //b.preorder_Traversal();
   //b.postorder_Traversal();
   //cout<<b.is_Empty();
   //cout<<b.nodecount();
   //cout<<b.search(1);
   //cout<<b.treeHeight();
   //cout<<b.treeleavescount();
}
int main(){
    ll t=1;
    //seive();
    //cin>>t;
    //cin.ignore();
    while(t--){
    solve();
    }
  return 0;
}
